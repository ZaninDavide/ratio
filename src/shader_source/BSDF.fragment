uniform sampler2D image;
uniform sampler2D normal_map;

varying in vec2 uv;
varying in vec3 normal;
varying in mat3 TBN;

varying out vec4 frag_color;

const vec3 lightDir = vec3(-1.0, 0.0, -0.75);
const vec3 lightColor = vec3(1.0, 1.0, 1.0);
const float specularity = 1.0;
const vec3 ambient = vec3(0.05, 0.05, 0.05);

void main() {
    vec3 baseColor = texture2D(image, uv).xyz;

    vec3 total_normal = texture2D(normal_map, uv).xyz;
    total_normal = total_normal * 2.0 - 1.0;   
    total_normal = normalize(TBN * total_normal); 
    
    // diffuse
    float diff = max(dot(lightDir, total_normal), 0.0);
    vec3 diffuse = diff * baseColor;

    // specular = reflection
    vec3 viewDir = normalize(-gl_FragCoord.xyz);
    vec3 reflectDir = reflect(-lightDir, total_normal);
    
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(total_normal, halfwayDir), 0.0), specularity * 1000.);
    
    vec3 specular = vec3(0.3) * spec;
    frag_color = vec4(atan(ambient + diffuse*lightColor + specular), 1.0);

    // frag_color = vec4(total_normal, 1.0);

    // frag_color = vec4(total_normal, 1.0);
    // frag_color = vec4(texture2D(normal_map, uv).xyz, 1.0);
}